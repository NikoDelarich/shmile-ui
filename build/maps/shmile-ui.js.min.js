{"version":3,"names":[],"mappings":"","sources":["shmile-ui.js"],"sourcesContent":["/**\n * A class of utility methods.\n */\n var CameraUtils = function() {};\n\n/**\n * Play the snap effect.\n * @param {Integer} idx\n *   The frame index to place the updated image.\n * @param {Function} cheeseCB\n *   Code to execute after \"Cheese\" is displayed.\n *   Typically, this wraps the command to fire the shutter.\n */\nCameraUtils.snap = function(idx, cheeseCb) {\n  p.zoomFrame(idx, 'in');\n  // These guys need to be promises.\n  p.modalMessage('Ready?', Config.ready_delay, 200, function() {\n    p.modalMessage(\"3\", 1000, 200, function() {\n      p.modalMessage(\"2\", 1000, 200,  function() {\n        p.modalMessage(\"1\", 1000, 200, function() {\n          cheeseCb();\n        });\n      });\n    });\n  });\n}\n\n/**\n * Given a max w and h bounds, return the dimensions\n * of the largest 4x6 rect that will fit within.\n */\nCameraUtils.scale4x6 = function(maxw, maxh) {\n    var s0 = 6/4; // width / height\n    var s1 = maxw/maxh;\n\n    // Then the width is longer. Use the shorter side (height)\n    if (s0 <= s1) {\n        return {w: maxh * 6/4, h: maxh};\n    } else {\n        return {w: maxw, h: maxw * 4/6}\n    }\n}\n\nCameraUtils.scale4x1 = function(maxw, maxh) {\n    var s0 = 6/4; // width / height\n    var s1 = maxw/maxh;\n\n    // Then the width is longer. Use the shorter side (height)\n    if (s0 <= s1) {\n        return {w: maxh * 4/6 * 0.5, h: maxh};\n    } else {\n        return {w: maxw, h: maxw * 6/4 * 0.5}\n    }\n}\n\n/**\n * Given a max w and h bounds, return the dimensions\n * of the largest 3x8 rect that will fit within.\n */\nCameraUtils.scale3x8 = function(maxw, maxh) {\n    var s0 = 8/3; // width / height\n    var s1 = maxw/maxh;\n\n    // Then the width is longer. Use the shorter side (height)\n    if (s0 <= s1) {\n        return {w: maxh * s0, h: maxh};\n    } else {\n        return {w: maxw, h: maxw * (1/s0)}\n    }\n}\n\nCameraUtils.scale = function(maxw, maxh, s0) {\n    // var s0 = 8/3; // width / height\n    var s1 = maxw/maxh;\n\n    // Then the width is longer. Use the shorter side (height)\n    if (s0 <= s1) {\n        return {w: maxh * s0, h: maxh};\n    } else {\n        return {w: maxw, h: maxw * (1/s0)}\n    }\n}\n\nvar Config = {\n  photo_margin: 50, // Margin for the composite photo per side\n  window_width: $(window).width(),\n  window_height: $(window).height() - 10,\n  overlay_delay: 2000,\n  next_delay: 10000,\n  cheese_delay: 400,\n  flash_duration: 1000,\n  ready_delay: 2000,\n  nice_delay: 5000,\n\n  // The amount of time we should pause between each frame shutter\n  // I tend to bump this up when 1) photobooth participants want more\n  // time to review their photos between shots, and 2) when I'm shooting\n  // with external flash and the flash needs more time to recharge.\n  between_snap_delay: 1000,\n\n  // For usability enhancements on iPad, set this to \"true\"\n  is_mobile: false\n}\n\n/**\n * Describes the current state of the UI.\n */\nvar AppState = function() {\n  this.reset();\n};\n\nAppState.prototype.reset = function() {\n  this.current_frame_idx = 0;\n  this.zoomed = null;\n}\n\n\n/*\n * STATE MACHINE DEFINITION\n * Keep track of app state and logic.\n *\n * + loading\n *   - connected() -> ready\n * + ready\n *   - ui_button_pressed() (DOM button click) -> waiting_for_photo\n * + waiting_for_photo\n *   - photo_saved() -> review_photo\n * + review_photo\n *   - photo_updated() -> next_photo\n * + next_photo\n *   - continue_partial_set() -> waiting_for_photo\n *   - finish_set() -> ready\n *\n * @param [PhotoView]\n * @param [Socket]            The initialized Socket\n * @param [AppState] appState Global initialized state\n * @param [Config] config     The configuration options passed to the app\n */\nvar ShmileStateMachine = function(photoView, socket, appState, config, buttonView, snackbar) {\n  this.photoView = photoView;\n  this.socket = socket;\n  this.appState = appState;\n  this.config = config;\n  this.buttonView = buttonView;\n  this.snackbar = snackbar;\n\n  var self = this;\n\n  this.buttonPrint = null;\n  this.shouldSendNotPrinting = false;\n\n  self.socket.on(\"printer_enabled\", function(optionalPrinting){\n    console.log(\"socket printer_enabled received, optionalPrinting is\" + optionalPrinting);\n      if (optionalPrinting) {\n        self.shouldSendNotPrinting = true;\n        self.fsm.show_print_message();\n        // FIXME: consider a bigger timeout here?\n        self.buttonPrint = setTimeout(function(){\n          // alert(\"Hello\");\n          self.fsm.show_message();\n        }, self.config.next_delay);\n      } else {\n        self.socket.emit('print');\n        setTimeout(function(){\n          self.fsm.print_set();\n        }, self.config.next_delay);\n      }\n  });\n  self.socket.on(\"review_composited\", () => {\n    setTimeout(function() {\n      self.fsm.show_message()\n    }, self.config.next_delay);\n  });\n  self.socket.on(\"print\", () => {\n    self.fsm.print_set();\n  });\n\n  this.fsm = StateMachine.create({\n    initial: 'loading',\n    events: [\n      { name: 'connected', from: 'loading', to: 'ready' },\n      { name: 'ui_button_pressed', from: 'ready', to: 'waiting_for_photo' },\n      { name: 'photo_saved', from: 'waiting_for_photo', to: 'review_photo' },\n      { name: 'photo_updated', from: 'review_photo', to: 'next_photo' },\n      { name: 'continue_partial_set', from: 'next_photo', to: 'waiting_for_photo' },\n      { name: 'finish_set', from: 'next_photo', to: 'review_composited' },\n      { name: 'show_print_message', from: 'review_composited', to: 'print_message' },\n      { name: 'print_set', from: ['print_message', 'review_composited'], to: 'printing'},\n      // { name: 'print_ok', from: 'printing', to: 'ready'},\n      { name: 'print_not_ok', from: 'printing', to: 'show_error_message'},\n      { name: 'show_message', from: ['review_composited', 'print_message', 'printing', 'show_error_message'], to: 'show_goodbye_message'},\n      { name: 'next_set', from: 'show_goodbye_message', to: 'ready'}\n    ],\n    callbacks: {\n      onconnected: function() {\n        console.log(\"onconnected\");\n        self.photoView.animate('in', function() {\n          self.buttonView.fadeIn();\n        });\n      },\n      onenterready: function() {\n        self.shouldSendNotPrinting = false;\n        self.photoView.resetState();\n      },\n      onleaveready: function() {\n      },\n      onenterwaiting_for_photo: function(e) {\n        cheeseCb = function() {\n          self.photoView.modalMessage('Cheese!', self.config.cheese_delay);\n          self.photoView.flashStart();\n          self.socket.emit('snap', true);\n        }\n        CameraUtils.snap(self.appState.current_frame_idx, cheeseCb);\n      },\n      onphoto_saved: function(e, f, t, data) {\n        // update UI\n        // By the time we get here, the idx has already been updated!!\n        self.photoView.flashEnd();\n        self.photoView.updatePhotoSet(data.web_url, self.appState.current_frame_idx, function() {\n          setTimeout(function() {\n            self.fsm.photo_updated();\n          }, self.config.between_snap_delay)\n        });\n      },\n      onphoto_updated: function(e, f, t) {\n        self.photoView.flashEnd();\n        // We're done with the full set.\n        var pictures = self.photoView.getPicturesTotal()\n        if (self.appState.current_frame_idx == pictures - 1) {\n          self.fsm.finish_set();\n        }\n        // Move the frame index up to the next frame to update.\n        else {\n          self.appState.current_frame_idx = (self.appState.current_frame_idx + 1) % pictures\n          self.fsm.continue_partial_set();\n        }\n      },\n      onenterreview_composited: function(e, f, t) {\n        self.socket.emit('composite');\n        self.photoView.showOverlay(true);\n      },\n      onenterprinting: function(e, f, t) {\n        clearTimeout(self.buttonPrint);\n        self.shouldSendNotPrinting = false;\n        setTimeout(function() {\n          self.fsm.show_message();\n        }, self.config.between_snap_delay);\n      },\n      onentershow_goodbye_message: function(e, f, t) {\n        // Clean up\n        self.fsm.next_set();\n        self.snackbar.hideMe();\n        if (self.shouldSendNotPrinting) {\n          self.socket.emit('do_not_print')\n        }\n      },\n      onenterprint_message: function(e, f, t) {\n        self.snackbar.showMe();\n      },\n      onleaveshow_goodbye_message: function(e, f, t) {\n        // Clean up\n        self.photoView.animate('out');\n        self.photoView.modalMessage('Nice!', self.config.nice_delay, 200, function() {\n          self.photoView.slideInNext();\n        });\n      },\n      onchangestate: function(e, f, t) {\n        console.log('fsm received event '+ e +', changing state from ' + f + ' to ' + t)\n      }\n    }\n  });\n}\n\n/**\n * Proxy object that allows the late initialization of the socket, if one\n * exists at all. In instances where we never initialize the socket, we allow\n * for a fake Socket object using a Backbone Event channel.\n */\nvar SocketProxy = function() {\n  this.socket = null;\n  this.fakeSocket = {};\n  _.extend(this.fakeSocket, Backbone.Events)\n}\n\nSocketProxy.prototype.lateInitialize = function(socket) {\n  this.socket = socket;\n}\n\nSocketProxy.prototype.on = function(evt, cb) {\n  if (this.socket === null) {\n    console.log(\"SocketProxy 'on' delegating to fakeSocket\")\n    this.fakeSocket.on(evt, cb)\n    return\n  }\n  this.socket.on(evt, cb);\n}\n\nSocketProxy.prototype.emit = function(msg, data) {\n  if (this.socket === null) {\n    console.log(\"SocketProxy 'emit' delegating to fakeSocket\")\n    this.fakeSocket.trigger(msg, function() {\n      console.log(data)\n    });\n    return\n  }\n  this.socket.emit(msg, data);\n}\n\n/**\n * Responsible for initializing the connection to socket.io.\n * @param io [Socket]\n * @param fsm [StateMachine]\n */\nvar SocketLayer = function(io, proxy) {\n  this.io = io;\n  this.proxy = proxy;\n}\n\n/**\n * Attempt a connection to socket.io server.\n * If this fails, will no-op and silently continue.\n */\nSocketLayer.prototype.init = function() {\n  try {\n    this.socket = this.io.connect(\"/\");\n    this.proxy.lateInitialize(this.socket);\n  } catch(e) {\n    console.log(\"Error initializing socket connection: \" + e);\n  }\n  return this;\n}\n\n/**\n * Register bindings and callbacks.\n */\nSocketLayer.prototype.register = function(fsm) {\n  console.log(\"register\");\n  this.fsm = fsm;\n  var self = this;\n\n  this.proxy.on('message', function(data) {\n    console.log('message evt: data is:' + data);\n  });\n\n  this.proxy.on('connect', function() {\n    console.log('connected evt');\n    self.fsm.connected();\n  });\n\n  this.proxy.on('camera_snapped', function() {\n    console.log('camera_snapped evt');\n    //fsm.camera_snapped();\n  })\n\n  this.proxy.on('photo_saved', function(data) {\n    console.log('photo_saved evt: ' + data.filename);\n    self.fsm.photo_saved(data);\n  });\n}\n\nvar PhotoView = Backbone.View.extend({\n  id: \"#viewport\",\n\n  initialize: function(config, state) {\n    this.config = config;\n    this.paper = new Raphael('viewport', this.config.window_width, this.config.window_height);\n    this.frames = this.paper.set(); // List of SVG black rects\n    this.images = this.paper.set(); // List of SVG images\n    this.all = this.paper.set();\n    this.overlayImage = null;\n    this.compositeDim = null;\n    this.compositeOrigin = null;\n    this.compositeCenter = null;\n    this.state = state;\n  },\n\n  render: function(template) {\n    this.translationTotal = {dx:0, dy:0};\n    this.photoViewLayout = new window[template.photoView](this.config);\n\n    var w = this.config.window_width - this.config.photo_margin;\n    var h = this.config.window_height - this.config.photo_margin;\n\n    this.compositeDim = CameraUtils.scale(w, h, this.photoViewLayout.finalSizeRatio);\n    this.compositeOrigin = {\n      x: (this.config.window_width - this.compositeDim.w) / 2,\n      y: (this.config.window_height - this.compositeDim.h) / 2\n    };\n    this.compositeCenter = {\n      x: this.compositeOrigin.x + (this.compositeDim.w/2),\n      y: this.compositeOrigin.y + (this.compositeDim.h/2)\n    }\n    var r = this.paper.rect(this.compositeOrigin.x, this.compositeOrigin.y, this.compositeDim.w, this.compositeDim.h);\n\n    r.attr({'fill': 'white'});\n\n    this.all.push(r);\n\n    var stuff = {\n      \"compositeDim\": this.compositeDim,\n      \"paper\": this.paper,\n      \"compositeOrigin\": this.compositeOrigin,\n      \"frames\": this.frames,\n      \"images\": this.images,\n      \"all\": this.all\n    };\n\n    this.frameDim = this.photoViewLayout.render(stuff);\n    this.setOverlay(template.overlayImage);\n    this.all.translate(-this.config.window_width, 0);\n  },\n\n  toString: function() {\n    ret = [];\n    ret.push(\"Size of 'all' set: \" + this.all.length);\n    ret.push(\"Size of 'frames' set: \" + this.frames.length);\n    ret.push(\"Composite photo is: \" + this.all[0].attr('width') + 'x' + this.all[0].attr('height'));\n    ret.push(\"Frame photo is: \" + this.frameDim.w + 'x' + this.frameDim.h);\n    return ret.join('\\n');\n  },\n\n  /**\n   * Updates the image at the set location.\n   * @param {String} img_src\n   *   The URL of the image resource the browser should fetch and display\n   * @param {Integer} idx\n   *   Index of frame to update\n   * @param cb\n   *   The callback to be executed when the UI has finished updating and zooming out.\n   */\n  updatePhotoSet: function(img_src, idx, cb) {\n    var view = this;\n    var imgEl = view.images[idx];\n    var frameEl = view.frames[idx];\n\n    console.log(\"idx = \" + idx);\n    // var [imgEl, frameEl] = this.photoViewLayout.updatePhotoSet(img_src, idx);\n\n\n    imgEl.attr({'src': img_src, 'opacity': 0});\n    imgEl.show();\n\n    var afterShowPhoto = function () {\n      // We've found and revealed the photo, now hide the old black rect and zoom out\n      frameEl.hide();\n      p.zoomFrame(idx, 'out', cb);\n    }\n    imgEl.animate({'opacity': 1}, 200, afterShowPhoto);\n  },\n\n  /**\n   * For in: assume the view has been rendered and reset to initial state and moved out of sight.\n   * Slide in the composite image.\n   * For out: assume the composite image is centered. Move out of sight and hide.\n   */\n  animate: function(dir, cb) {\n    if (dir === 'in') {\n      if (this.overlayImage) {\n        this.overlayImage.hide();\n      }\n      this.all.animate({\n        'translation': this.config.window_width+\",0\"\n      }, 1000, \"<>\", cb);\n    } else if (dir === 'out') {\n      this.all.animate({\n        'translation': this.config.window_width+\",0\"\n      }, 1000, \"<>\", cb);\n    }\n  },\n\n  /**\n   * zoomFrame zooms into the indicated frame.\n   * Call it once to zoom in, call it again to zoom out.\n   *\n   * @param idx Frame index\n   *   Expect zoomFrame(1) to be matched immediately by zoomFrame(1)\n   * frame: 0 (upper left), 1 (upper-right), 2 (lower-left), 3 (lower-right)\n   * @param dir 'in' or 'out'\n   *   Zoom in or out\n   * @param onfinish\n   *   Callback executed when the animation is finished.\n   *\n   * Depends on the presence of the .zoomed object to store zoom info.\n   */\n   // FIXME: thsi should be a general method\n  zoomFrame: function(idx, dir, onfinish) {\n    if ((dir === \"out\" && this.state.zoomed) ||\n        (dir === \"in\" && !this.state.zoomed)) {\n      var view = this;\n      var frame = view.frames[idx];\n\n      var frameX = frame.attr('x');\n      var frameW = frame.attr('width');\n      var frameY = frame.attr('y');\n      var frameH = frame.attr('height');\n      var centerX = frameX + frameW/2;\n      var centerY = frameY + frameH/2;\n\n      var animSpeed = 1000;\n\n      // delta to translate to.\n      var dx = this.compositeCenter.x - centerX;\n      var dy = this.compositeCenter.y - centerY;\n\n      if (dir === \"out\" && this.state.zoomed) {\n        // scaleFactor = 1;\n        view.translationTotal.dx -= this.state.zoomed.dx;\n        view.translationTotal.dy -= this.state.zoomed.dy;\n        view.all.animate({\n          'scale': [1, 1, view.compositeCenter.x, view.compositeCenter.y].join(','),\n        }, animSpeed, 'bounce', //onFinish);\n        function() {\n          if (idx == view.photoViewLayout.totalPictures - 1) {\n            view.all.animate({\n              'translation': view.translationTotal.dx+','+view.translationTotal.dy\n            }, animSpeed, '<>', onfinish)\n          } else {\n            onfinish();\n          }\n        });\n        this.state.zoomed = null;\n      } else if (dir !== \"out\") {\n        var scaleFactor = this.compositeDim.h / frameH;\n        view.all.animate({\n          'translation': dx+','+dy\n        }, animSpeed, '<>', function() {\n          view.all.animate({\n            'scale': [scaleFactor, scaleFactor, view.compositeCenter.x, view.compositeCenter.y].join(','),\n          }, animSpeed, 'bounce', onfinish)\n        });\n        // Store the zoom data for next zoom.\n        this.state.zoomed =  {\n          dx: dx,\n          dy: dy\n          // scaleFactor: scaleFactor\n        };\n      }\n    }\n  },\n\n  calculateOutTranslation: function(idx, state, onfinish) {\n    var view = this;\n    var animSpeed = 1000;\n\n    if (view.shouldRestoreOutState) {\n      view.all.animate({\n        'translation': [-state.dx, -state.dy].join(',')\n      }, animSpeed, '<>', onfinish);\n    } else {\n      view.translationTotal.dx -= state.zoomed.dx;\n      view.translationTotal.dy -= state.zoomed.dy;\n      if (idx == view.totalPictures - 1) {\n        view.all.animate({\n          'translation': view.translationTotal.dx+','+view.translationTotal.dy\n        }, animSpeed, '<>', onfinish);\n      } else {\n        onfinish();\n      }\n    };\n  },\n\n  /**\n   * Reset visibility, location of composite image for next round.\n   */\n  slideInNext: function() {\n      this.resetState();\n      this.modalMessage('Next!');\n\n      this.images.hide();\n      this.frames.show();\n\n      this.translationTotal.dx = 0;\n      this.translationTotal.dy = 0;\n\n      this.all.translate(-this.config.window_width * 2, 0);\n\n      this.animate('in', function() {\n        $('#start-button').fadeIn();\n      });\n  },\n\n  /**\n   * Resets the state variables.\n   */\n  resetState: function () {\n    this.state.reset();\n  },\n\n  /**\n   * Faux camera flash\n   */\n  flashEffect: function(duration) {\n    if (duration === undefined) { duration = 200; }\n    // var rect = this.canvas.rect(0, 0, this.config.window_width, this.config.window_height);\n    var rect = this.paper.rect(0, 0, this.config.window_width, this.config.window_height);\n    rect.attr({'fill': 'white', 'opacity': 0});\n    rect.animate({'opacity': 1}, duration, \">\", function() {\n      rect.animate({'opacity': 0}, duration, \"<\");\n      rect.remove();\n    })\n  },\n\n  flashStart: function(duration) {\n    if (duration === undefined) { duration = 200; }\n    // this.rect = this.canvas.rect(0, 0, this.config.window_width, this.config.window_height);\n    this.rect = this.paper.rect(0, 0, this.config.window_width, this.config.window_height);\n    this.rect.attr({'fill': 'white', 'opacity': 0});\n    this.rect.animate({'opacity': 1}, duration, \">\")\n  },\n\n  flashEnd: function(duration) {\n    if (duration === undefined) { duration = 200; }\n    var self = this;\n    this.rect.animate({'opacity': 0}, duration, \"<\", function() {\n      self.remove();\n    });\n  },\n\n  /**\n   * Draws a modal with some text.\n   */\n  modalMessage: function(text, persistTime, animateSpeed, cb) {\n      if (animateSpeed === undefined) { var animateSpeed = 200; }\n      if (persistTime === undefined) { var persistTime = 500; }\n\n      var sideLength = this.config.window_height * 0.3;\n      var x = (this.config.window_width - sideLength)/2;\n      var y = (this.config.window_height - sideLength)/2;\n      var all = this.paper.set();\n      var r = this.paper.rect(x, y,\n      // var r = this.canvas.rect(x, y,\n          sideLength,\n          sideLength,\n          15);\n      r.attr({'fill': '#222',\n              'fill-opacity': 0.7,\n              'stroke-color': 'white'});\n      all.push(r);\n      var txt = this.paper.text(x + sideLength/2, y + sideLength/2, text);\n      txt.attr({'fill': 'white',\n          'font-size': '50',\n          'font-weight': 'bold'\n      });\n      all.push(txt);\n      all.attr({'opacity': 0});\n      all.animate({\n          'opacity': 1,\n          'scale': '1.5,1.5',\n          'font-size': '70'\n      }, animateSpeed, '>');\n\n      // Timer to delete self nodes.\n      var t = setTimeout(function(all) {\n          // Delete nodes\n          txt.remove();\n          r.remove();\n          if (cb) cb();\n      }, persistTime, all);\n  },\n\n  /**\n   * Applies the final image overlay to the composite image.\n   * This will usually contain the wedding logo: 24-bit transparent PNG\n   */\n  showOverlay: function(animate) {\n      this.overlayImage.show();\n      if (animate) {\n          //this.overlayImage.attr({'opacity':0});\n        this.overlayImage.animate({'opacity':1}, this.config.overlay_delay);\n      }\n  },\n\n  /**\n   * Removes the overlay\n   */\n  hideOverlay: function(animate) {\n    var view = this;\n    if (animate) {\n      this.overlayImage.animate({'opacity':0}, this.config.overlay_delay, function() {\n        view.overlayImage.hide();\n      });\n    } else {\n      this.overlayImage.hide();\n    }\n  },\n\n  setOverlay: function(overlayImage) {\n    // Draw the PNG logo overlay.\n    var o = this.paper.image(\n      overlayImage,\n      this.compositeOrigin.x,\n      this.compositeOrigin.y,\n      this.compositeDim.w,\n      this.compositeDim.h)\n    // var o = this.photoViewLayout.createOverlayImage(overlayImage);\n    if (!this.overlayImage) {\n      this.all.push(o);\n      // this.all.remove(this.overlayImage);\n    }\n    o.hide();\n    this.overlayImage = o;\n  },\n\n  getPicturesTotal: function() {\n    return this.photoViewLayout.totalPictures;\n  },\n\n\n});\n\nvar ButtonView = function(fsm) {\n  this.fsm = fsm;\n}\n\nButtonView.prototype.render = function() {\n  var self = this;\n  // init code\n  this.startButton = $('button#start-button');\n  var buttonX = (Config.window_width - this.startButton.outerWidth())/2;\n  var buttonY = (Config.window_height - this.startButton.outerHeight())/2;\n\n  this.startButton.hide();\n\n  // Position the start button in the center\n  this.startButton.css({'top': buttonY, 'left': buttonX});\n\n  var buttonTriggerEvt = Config.is_mobile ? \"touchend\" : \"click\";\n\n  this.startButton.bind(buttonTriggerEvt, function(e) {\n    var button = $(e.currentTarget);\n    button.fadeOut(1000);\n    $(document).trigger('ui_button_pressed');\n  });\n\n  $(document).bind('ui_button_pressed', function() {\n    console.log('ui_button_pressed evt');\n    self.fsm.ui_button_pressed();\n  });\n}\nButtonView.prototype.fadeIn = function() {\n  this.startButton.fadeIn();\n}\n\n\n// Everything required to set up the app.\n$(window).ready(function() {\n  var socketProxy = new SocketProxy();\n  var appState = new AppState();\n\n  window.io = window.io || undefined;\n\n  var layer = new SocketLayer(window.io, socketProxy)\n  layer.init();\n\n  window.p = new PhotoView(window.Config, appState);\n  bv = new ButtonView();\n  snackbar = new Snackbar(socketProxy);\n\n  var ssm = new ShmileStateMachine(window.p, socketProxy, appState, window.Config, bv, snackbar)\n\n  bv.fsm = ssm.fsm;\n  // snackbar.fsm = ssm.fsm;\n\n  window.socketProxy = socketProxy;\n\n  socketProxy.on('template', (template) => {\n    console.log(\"blah \" + template.overlayImage);\n    layer.register(ssm.fsm);\n    bv.render();\n    snackbar.render();\n    p.render(template);\n\n    // p.setOverlay(template.overlayImage);\n    // p.setPicturesTotal(template.photosTotal);\n    // p.setLayout(template.photoView);\n\n    ssm.fsm.connected();\n  });\n  // socketProxy.on(\"printer_enabled\", () => {\n  //     ssm.fsm.show_print_message();\n  // });\n  // socketProxy.on(\"review_composited\", () => {\n  //   setTimeout(function() {\n  //     ssm.fsm.next_set()\n  //   }, self.config.next_delay);\n  // });\n});\n\nvar Snackbar = function(socket) {\n  this.socket = socket;\n}\nSnackbar.prototype.render = function() {\n  this.snackbar = document.getElementById('snackbar');\n}\nSnackbar.prototype.pressed = function() {\n  this.socket.emit(\"print\")\n  this.hideMe();\n}\nSnackbar.prototype.showMe = function() {\n  if (self.snackbar.classClass !== \"showMe\") {\n    this.snackbar.className = \"showMe\";\n  }\n}\nSnackbar.prototype.hideMe = function() {\n  var self = this;\n  if (self.snackbar.className === \"showMe\") {\n    self.snackbar.className = \"hideMe\";\n    setTimeout(function() {\n      self.snackbar.className = \"\";\n    }, 2300);\n  }\n}\n\nvar PortraitOneByFour = function(config) {\n  this.photoBorder = 0;\n  this.totalPictures = 4;\n  this.finalSizeRatio = 2/6;\n}\n\nPortraitOneByFour.prototype.render = function(stuff) {\n  var compositeDim = stuff.compositeDim;\n  var paper = stuff.paper;\n  var compositeOrigin = stuff.compositeOrigin;\n  var frames = stuff.frames;\n  var images = stuff.images;\n  var all = stuff.all;\n\n  // Scale the photo padding too\n  this.photoBorder = compositeDim.w / 50;\n\n  //upper x\n  var frame_x = compositeOrigin.x + this.photoBorder;\n  var frame_y = compositeOrigin.y + this.photoBorder;\n  \n  var _frame_w = (compositeDim.w - (2*this.photoBorder));\n\n  this.frameDim = {\n    w: (compositeDim.w - (2*this.photoBorder)),\n    h: _frame_w * 4/6 // TODO: Fixed aspect ratio?\n  };\n  var frame = paper.rect(frame_x, frame_y, this.frameDim.w, this.frameDim.h);\n  frame.attr({'fill': 'black'});\n  var img = paper.image(null, frame_x, frame_y, this.frameDim.w, this.frameDim.h);\n\n  images.push(img);\n  frames.push(frame);\n  all.push(img);\n  all.push(frame);\n\n  for (var i = 0; i < 3; i++) {\n    frame = frame.clone();\n    img = img.clone();\n    frame.translate(0, this.frameDim.h + this.photoBorder);\n    img.translate(0, this.frameDim.h + this.photoBorder);\n    frames.push(frame);\n    images.push(img);\n    all.push(frame);\n    all.push(img);\n  }\n\n  return this.frameDim;\n}\n\nvar LandscapeTwoByTwo = function(config) {\n    this.photoBorder = 0;\n    this.totalPictures = 4;\n    this.finalSizeRatio = 6/4;\n  }\n\nLandscapeTwoByTwo.prototype.render = function(stuff) {\n  var compositeDim = stuff.compositeDim;\n  var paper = stuff.paper;\n  var compositeOrigin = stuff.compositeOrigin;\n  var frames = stuff.frames;\n  var images = stuff.images;\n  var all = stuff.all;\n\n  // Scale the photo padding too\n  this.photoBorder = compositeDim.w / 50;\n\n  //upper x\n  var frame_x = compositeOrigin.x + this.photoBorder;\n  var frame_y = compositeOrigin.y + this.photoBorder;\n  this.frameDim = {\n      w: (compositeDim.w - (3*this.photoBorder))/2,\n      h: (compositeDim.h - (3*this.photoBorder))/2\n  };\n  var frame = paper.rect(frame_x, frame_y, this.frameDim.w, this.frameDim.h);\n  frame.attr({'fill': 'black'});\n  var img = paper.image(null, frame_x, frame_y, this.frameDim.w, this.frameDim.h);\n\n  images.push(img);\n  frames.push(frame);\n  all.push(img);\n  all.push(frame);\n\n  frame = frame.clone();\n  img = img.clone();\n  frame.translate(this.frameDim.w + this.photoBorder, 0);\n  img.translate(this.frameDim.w + this.photoBorder, 0);\n  frames.push(frame);\n  images.push(img);\n  all.push(frame);\n  all.push(img);\n\n  frame = frame.clone();\n  img = img.clone();\n  frame.translate(-(this.frameDim.w + this.photoBorder), this.frameDim.h + this.photoBorder);\n  img.translate(-(this.frameDim.w + this.photoBorder), this.frameDim.h + this.photoBorder);\n  frames.push(frame);\n  images.push(img);\n  all.push(frame);\n  all.push(img);\n\n  frame = frame.clone();\n  img = img.clone();\n  frame.translate(this.frameDim.w + this.photoBorder, 0);\n  img.translate(this.frameDim.w + this.photoBorder, 0);\n  frames.push(frame);\n  images.push(img);\n  all.push(frame);\n  all.push(img);\n\n  return this.frameDim;\n\n}\n\nvar LandscapeOneByThree = function(config) {\n  this.totalPictures = 3;\n  this.size =  {w: 2000, h: 750};\n  this.frameSize = {w: 633.33, h:422.22}\n  this.frameSpacing = 50;\n  this.finalSizeRatio = 8/3;\n}\n\nLandscapeOneByThree.prototype.render = function(stuff) {\n  var compositeDim = stuff.compositeDim;\n  var paper = stuff.paper;\n  var compositeOrigin = stuff.compositeOrigin;\n  var frames = stuff.frames;\n  var images = stuff.images;\n  var all = stuff.all;\n\n  var scaleFactor = compositeDim.h / this.size.h;\n\n  var frameDim = {\n    w: scaleFactor * this.frameSize.w,\n    h: scaleFactor * this.frameSize.h\n  }\n  var spacing = this.frameSpacing * scaleFactor;\n  var frame = paper.rect(compositeOrigin.x, compositeOrigin.y + spacing, frameDim.w, frameDim.h);\n  frame.attr({'fill': 'black', 'id': 'frame0'});\n  var img = paper.image(null, compositeOrigin.x, compositeOrigin.y + spacing, frameDim.w, frameDim.h);\n\n  images.push(img);\n  frames.push(frame);\n  all.push(img);\n  all.push(frame);\n\n  for (var i = 1; i < 3; i++) {\n    frame = frame.clone();\n    img = img.clone();\n    frame.translate(spacing + frameDim.w, 0);\n    frame.attr({'id': 'frame' + i});\n    img.translate(spacing + frameDim.w, 0);\n    frames.push(frame);\n    images.push(img);\n    all.push(frame);\n    all.push(img);\n  }\n\n  return frameDim;\n}\n\nvar SnapOneByFour = function(config) {\n    this.config = config;\n    // this.paper = Snap('#viewport', his.config.window_width, this.config.window_height);\n    this.paper = Snap();\n    this.paper.attr({\n      viewBox: [0, 0, 2000, 750]\n    });\n    Snap.select('#viewport').append(this.paper);\n    // this.frames = this.paper.group(); // List of SVG black rects\n    // this.images = this.paper.group(); // List of SVG images\n    // this.all = this.paper.group();\n    // this.overlayImage = null;\n    // this.photoBorder = 0;\n    // this.compositeDim = null;\n    // this.frameDim = null;\n    // this.compositeOrigin = null;\n    // this.compositeCenter = null;\n    // this.state = state;\n    this.totalPictures = 3;\n    // this.overlay = null;\n    // this.photoViewLayout = null;\n\n    // Snap.plugin( function( Snap, Element, Paper, global ) {\n    //   Element.prototype.getCenter = function() {\n    //     var bbox = this.getBBox();\n    //     return [bbox.cx, bbox.cy]\n    //   };\n    // });\n\n    // Polyfill for getTransformToElement as Chrome 48 has deprecated it, may be able to simplify globalToLocal now and leave out polyfill\n    SVGElement.prototype.getTransformToElement = SVGElement.prototype.getTransformToElement || function(elem) {\n      return elem.getScreenCTM().inverse().multiply(this.getScreenCTM());\n    };\n\n    Snap.plugin( function( Snap, Element, Paper, global ) {\n      Element.prototype.hide = function() {\n        this.attr({ 'opacity': 0.0 });\n        // var bbox = this.getBBox();\n        // return [bbox.cx, bbox.cy]\n      };\n      Element.prototype.show = function() {\n        this.attr({ 'opacity': 1.0 });\n        // var bbox = this.getBBox();\n        // return [bbox.cx, bbox.cy]\n      };\n      Element.prototype.getCenter = function() {\n        var bbox = this.getBBox();\n        return {x: bbox.cx, y:bbox.cy};\n      };\n      Element.prototype.getSize = function() {\n        var bbox = this.getBBox();\n        return {w: bbox.width, h:bbox.height};\n      };\n      Element.prototype.getPos = function() {\n        var bbox = this.getBBox();\n        return {x: bbox.x, y:bbox.y};\n      };\n      Element.prototype.getTransformRelative = function(relativeObj, type, absolute, xadjust, yadjust) {\n        var movex = 0;\n        var movey = 0;\n        switch (type) {\n          case \"center\":\n          var c = relativeObj.getCenter();\n          var elpos = this.getPos();\n          var elsize = this.getSize();\n          var movex = c.x - (elsize.w / 2);\n          var movey = c.y - (elsize.h / 2);\n\n          movex = (elpos.x > movex ? 0 - (elpos.x - movex) : movex - elpos.x);\n          movey = (elpos.y > movey ? 0 - (elpos.y - movey) : movey - elpos.y);\n          break;\n          case \"topleft\":\n          var movepos = relativeObj.getPos();\n          var elpos = this.getPos();\n\n          movex = (elpos.x > movepos.x ? 0 - (elpos.x - movepos.x) : movepos.x - elpos.x);\n          movey = (elpos.y > movepos.y ? 0 - (elpos.y - movepos.y) : movepos.y - elpos.y);\n          break;\n          case \"bottomleft\":\n          var movepos = relativeObj.getBBox();\n          var elpos = this.getPos();\n\n          movex = (elpos.x > movepos.x ? 0 - (elpos.x - movepos.x) : movepos.x - elpos.x);\n          movey = (elpos.y > movepos.y2 ? 0 - (elpos.y - movepos.y2) : movepos.y2 - elpos.y);\n          break;\n          case \"topright\":\n          var movepos = relativeObj.getPos();\n          var rsize = relativeObj.getSize();\n          var elsize = this.getSize();\n          var elpos = this.getPos();\n\n          movex = (elpos.x > movepos.x ? 0 - (elpos.x - movepos.x) : movepos.x - elpos.x);\n          movey = (elpos.y > movepos.y ? 0 - (elpos.y - movepos.y) : movepos.y - elpos.y);\n          movex += rsize.w - elsize.w;\n          break;\n          case \"bottomright\":\n          var movepos = relativeObj.getBBox();\n          var rsize = relativeObj.getSize();\n          var elsize = this.getSize();\n          var elpos = this.getPos();\n\n          movex = (elpos.x > movepos.x2 ? 0 - (elpos.x - movepos.x2) : movepos.x2 - elpos.x);\n          movey = (elpos.y > movepos.y2 ? 0 - (elpos.y - movepos.y2) : movepos.y2 - elpos.y);\n          break;\n          case \"topcenter\":\n          var c = relativeObj.getCenter();\n          var rpos = relativeObj.getPos();\n          var elpos = this.getPos();\n          var elsize = this.getSize();\n          var movex = c.x - (elsize.w / 2);\n\n          movex = (elpos.x > movex ? 0 - (elpos.x - movex) : movex - elpos.x);\n          movey = (elpos.y > rpos.y ? 0 - (elpos.y - rpos.y) : rpos.y - elpos.y);\n          break;\n          case \"bottomcenter\":\n          var c = relativeObj.getCenter();\n          var rpos = relativeObj.getBBox();\n          var elpos = this.getPos();\n          var elsize = this.getSize();\n          var movex = c.x - (elsize.w / 2);\n\n          movex = (elpos.x > movex ? 0 - (elpos.x - movex) : movex - elpos.x);\n          movey = (elpos.y > rpos.y2 ? 0 - (elpos.y - rpos.y2) : rpos.y2 - elpos.y);\n          break;\n          case \"leftcenter\":\n          var c = relativeObj.getCenter();\n          var rpos = relativeObj.getPos();\n          var elpos = this.getPos();\n          var elsize = this.getSize();\n          var movey = c.y - (elsize.h / 2);\n\n          movex = (elpos.x > rpos.x ? 0 - (elpos.x - rpos.x) : rpos.x - elpos.x);\n          movey = (elpos.y > movey ? 0 - (elpos.y - movey) : movey - elpos.y);\n          break;\n          case \"rightcenter\":\n          var c = relativeObj.getCenter();\n          var rbox = relativeObj.getBBox();\n          var elpos = this.getPos();\n          var elsize = this.getSize();\n          var movey = c.y - (elsize.h / 2);\n\n          movex = (elpos.x > rbox.x2 ? 0 - (elpos.x - rbox.x2) : rbox.x2 - elpos.x);\n          movey = (elpos.y > movey ? 0 - (elpos.y - movey) : movey - elpos.y);\n          break;\n          default:\n          console.log(\"ERROR: Unknown transform type in getTransformRelative!\");\n          break;\n        }\n\n        if (typeof(xadjust) === 'undefined') xadjust = 0;\n        if (typeof(yadjust) === 'undefined') yadjust = 0;\n        movex = movex + xadjust;\n        movey = movey + yadjust;\n\n        return (absolute ? \"T\"+movex+\",\"+movey : \"t\"+movex+\",\"+movey);\n      };\n\n      Element.prototype.getCenterPoint = function( x, y ) {\n        var pt = this.paper.node.createSVGPoint();\n        var center = this.getCenter();\n        pt.x = center.x; pt.y = center.y;\n        return pt.matrixTransform( this.paper.node.getScreenCTM().inverse());\n      };\n\n      Element.prototype.globalToLocal = function( globalPoint ) {\n        var globalToLocal = this.node.getTransformToElement( this.paper.node ).inverse();\n        globalToLocal.e = globalToLocal.f = 0;\n        return globalPoint.matrixTransform( globalToLocal );\n      };\n\n      Element.prototype.zoomToFit = function() {\n        //paper -> global?\n        //var pt1 = frame1.getCursorPoint(paper.getCenterPoint().x,paper.getCenterPoint().y)\n        // var pt = frame1.globalToLocal(pt1)\n        // undefined\n        // var t = \"t\" + [pt.x, pt.y]\n        // undefined\n        // t\n        // \"t354.1203918457031,132.8743133544922\"\n        // window.p.photoViewLayout.paper.animate({transform: t}, 1000, mina.easeinout);\n\n\n        var centerPoint = this.getCenterPoint();\n\n        var paperPoint = this.paper.getCenterPoint()\n        var pt = this.paper.node.createSVGPoint();\n\n        pt.x = paperPoint.x - centerPoint.x;\n        pt.y = paperPoint.y - centerPoint.y;\n\n        var localPt = this.globalToLocal( pt );\n        var localMatrix = this.transform().localMatrix;\n\n        // return this.transform( localMatrix.toTransformString() + \"t\" + [  localPt.x, localPt.y ] );\n        return  localMatrix.toTransformString() + \"t\" + [  localPt.x, localPt.y ] ;\n      };\n\n\n      Element.prototype.ztf = function (stuff) {\n        // paper -> global?\n        var centerPoint = stuff.getCenterPoint();\n        var pt1 = this.getCursorPoint(centerPoint.x, centerPoint.y)\n        var pt = this.globalToLocal(pt1)\n        // undefined\n        var t = \"t\" + [pt.x, pt.y]\n        return t;\n        // undefined\n        // t\n        // \"t354.1203918457031,132.8743133544922\"\n        // window.p.photoViewLayout.paper.animate({transform: t}, 1000, mina.easeinout);\n      }\n      Element.prototype.getCursorPoint = function( x, y ) {\n        var pt = this.paper.node.createSVGPoint();\n        pt.x = x; pt.y = y;\n        return pt.matrixTransform( this.paper.node.getScreenCTM().inverse());\n      };\n\n      Element.prototype.altDrag = function() {\n        return this.drag( altMoveDrag, altStartDrag );\n      };\n\n      function altMoveDrag( xxdx, xxdy, ax, ay ) {\n        var tdx, tdy;\n        var cursorPoint = this.getCursorPoint( ax, ay );\n        var pt = this.paper.node.createSVGPoint();\n\n        pt.x = cursorPoint.x - this.data('op').x;\n        pt.y = cursorPoint.y - this.data('op').y;\n\n        var localPt = this.globalToLocal( pt );\n\n        this.transform( this.data('ot').toTransformString() + \"t\" + [  localPt.x, localPt.y ] );\n\n      };\n\n      function altStartDrag( x, y, ev ) {\n        this.data('ibb', this.getBBox());\n        this.data('op', this.getCursorPoint( x, y ));\n        this.data('ot', this.transform().localMatrix);\n      };\n    });\n\n  }\n\nSnapOneByFour.prototype.render = function(cb) {\n  var snap = this.paper;\n  Snap.load(\"/images/drawing.svg\", function(data){\n    var el = data.select(\"svg\");\n  //   el.attr({'id':'paper'\n  // // });\n  // // , 'width':window.Config.window_width - 50\n  // , 'width': \"95%\"\n  // , 'height': \"95%\", 'display': \"block\", 'margin': \"auto\"});\n  // ,'height':window.Config.window_height - 50});\n    // el.transform('t0,'+0+'s'+compositeDim.w/755.91);\n\n    snap.append(el)\n    if (cb) {\n      var overlay = el.select('#layer3');\n      cb(overlay);\n    }\n  });\n  return this.paper;\n\n\n    // var w = this.config.window_width - this.config.photo_margin;\n    // var h = this.config.window_height - this.config.photo_margin;\n    // this.compositeDim = CameraUtils.scale4x1(w, h);\n    // this.compositeOrigin = {\n    //     x: (this.config.window_width - this.compositeDim.w) / 2,\n    //     y: (this.config.window_height - this.compositeDim.h) / 2\n    // };\n    // this.compositeCenter = {\n    //     x: this.compositeOrigin.x + (this.compositeDim.w/2),\n    //     y: this.compositeOrigin.y + (this.compositeDim.h/2)\n    // }\n    // var r = this.paper.rect(this.compositeOrigin.x, this.compositeOrigin.y, this.compositeDim.w, this.compositeDim.h);\n    //\n    // r.attr({'fill': 'white'});\n    //\n    // this.paper.append(r);\n    //\n    // // Scale the photo padding too\n    // this.photoBorder = this.compositeDim.w / 50;\n    //\n    //     //upper x\n    // var frame_x = this.compositeOrigin.x + this.photoBorder;\n    // var frame_y = this.compositeOrigin.y + this.photoBorder;\n    //\n    // var _frame_w = (this.compositeDim.w - (2*this.photoBorder));\n    //\n    // this.frameDim = {\n    //     w: (this.compositeDim.w - (2*this.photoBorder)),\n    //     h: _frame_w * 4/6 // TODO: Fixed aspect ratio?\n    // };\n    // var frame = this.paper.rect(frame_x, frame_y, this.frameDim.w, this.frameDim.h);\n    // frame.attr({'fill': 'black'});\n    // var img = this.paper.image(null, frame_x, frame_y, this.frameDim.w, this.frameDim.h);\n    //\n    // this.images.append(img);\n    // this.frames.append(frame);\n    // // this.all.append(img);\n    // // this.all.append(frame);\n    //\n    // for (var i = 1; i < 4; i++) {\n    //   frame = frame.clone();\n    //   img = img.clone();\n    //   frame.transform('t0,'+(i*(this.frameDim.h + this.photoBorder)));\n    //   img.transform('t0,'+(i*(this.frameDim.h + this.photoBorder)));\n    //   this.frames.append(frame);\n    //   this.images.append(img);\n    //   // this.all.append(frame);\n    //   // this.all.append(img);\n    // }\n    //\n    // // return [this.paper, this.all];\n    // return this.paper;\n    //\n    // // // Draw the PNG logo overlay.\n    // // var o = this.paper.image(\n    // //     '/images/overlay_david.png',\n    // //     this.compositeOrigin.x,\n    // //     this.compositeOrigin.y,\n    // //     this.compositeDim.w,\n    // //     this.compositeDim.h);\n    // // this.all.push(o);\n    // // this.overlayImage = o;\n    //\n    // // Hide everything and move out of sight.\n    // // this.all.hide();\n    // // this.all.translate(-this.config.window_width, 0);\n  }\n\nSnapOneByFour.prototype.toString = function() {\n    ret = [];\n    ret.push(\"Size of 'all' set: \" + this.all.length);\n    ret.push(\"Size of 'frames' set: \" + this.frames.length);\n    ret.push(\"Composite photo is: \" + this.all[0].attr('width') + 'x' + this.all[0].attr('height'));\n    ret.push(\"Frame photo is: \" + this.frameDim.w + 'x' + this.frameDim.h);\n    return ret.join('\\n');\n  }\n\n  /**\n   * Updates the image at the set location.\n   * @param {String} img_src\n   *   The URL of the image resource the browser should fetch and display\n   * @param {Integer} idx\n   *   Index of frame to update\n   * @param cb\n   *   The callback to be executed when the UI has finished updating and zooming out.\n   */\n  SnapOneByFour.prototype.updatePhotoSet = function(img_src, idx, cb) {\n    var view = this;\n    var frameEl = view.select('#frame'+(idx + 1));\n    var imgEl = frameEl.clone();\n\n    return [imgEl, frameEl]\n    // imgEl.attr({'src': img_src, 'opacity': 0});\n    // imgEl.show();\n    //\n    // var afterShowPhoto = function () {\n    //   // We've found and revealed the photo, now hide the old black rect and zoom out\n    //   frameEl.hide();\n    //   p.zoomFrame(idx, 'out', cb);\n    // }\n    // imgEl.animate({'opacity': 1}, 200, afterShowPhoto);\n  }\n\n\n\n  /**\n   * zoomFrame zooms into the indicated frame.\n   * Call it once to zoom in, call it again to zoom out.\n   *\n   * @param idx Frame index\n   *   Expect zoomFrame(1) to be matched immediately by zoomFrame(1)\n   * frame: 0 (upper left), 1 (upper-right), 2 (lower-left), 3 (lower-right)\n   * @param dir 'in' or 'out'\n   *   Zoom in or out\n   * @param onfinish\n   *   Callback executed when the animation is finished.\n   *\n   * Depends on the presence of the .zoomed object to store zoom info.\n   */\n  SnapOneByFour.prototype.zoomFrame = function(idx, dir, state, onfinish) {\n      var view = this.paper;\n      // var composite = this.all[idx];\n\n      var bbox = view.select('#frame' + (idx + 1)).getBBox();\n      var frameX = bbox.x;//frame.attr('x');\n      var frameW = bbox.width;//frame.attr('width');\n      var frameY = bbox.y;//frame.attr('y');\n      var frameH = bbox.height;//frame.attr('height');\n      var centerX = bbox.cx;//frameX + frameW/2;\n      var centerY = bbox.cy;//frameY + frameH/2;\n\n      var animSpeed = 1000;\n\n      // delta to translate to.\n      // var dx = (window.Config.window_width/2) - centerX;\n      // var dy = (window.Config.window_height/2) - centerY;\n\n      var svg = Snap.select('svg');\n      var b = svg.getBBox();\n\n      var compositeCenter = { x: b.cx,\n                              y: b.cy };\n      // var compositeCenter = { x: window.Config.window_width / 2,\n      //                         y: window.Config.window_height / 2 };\n\n      var dx = compositeCenter.x - centerX;\n      var dy =  compositeCenter.y - centerY;\n      var scaleFactor = b.width / frameW;\n      if (dir === \"out\" && state.zoomed) {\n          scaleFactor = 1;\n          dx = -state.zoomed.dx;\n          dy = -state.zoomed.dy;\n          view.animate({\n              transform: 's' + [1, 1, compositeCenter.x, compositeCenter.y].join(','),\n          }, animSpeed, mina.bounce, //onFinish);\n          function() {\n              view.animate({\n                  'translation': dx+','+dy\n              }, animSpeed, mina.easeInOut, onfinish)\n          });\n          return null;\n      } else if (dir !== \"out\") {\n          view.animate({\n              transform: 't'+ dx+','+ dy\n              // transform: 's' + [1, 1, centerX, centerY].join(','),\n          }, animSpeed, mina.easeInOut);//, function() {\n          //     view.animate({\n          //         transform: 's' + [scaleFactor, scaleFactor, compositeCenter.x, compositeCenter.y].join(','),\n          //     }, animSpeed, mina.bounce, onfinish)\n          // });\n          // Store the zoom data for next zoom.\n          return  {\n              dx: dx,\n              dy: dy,\n              scaleFactor: scaleFactor\n          };\n      }\n  }\n\nSnapOneByFour.prototype.removeImages = function () {\n  // // this.images.clear();\n  // for (var i = 0; i < this.totalPictures; i++) {\n  //   this.images.pop();\n  // }\n  // this.images.hide();\n  // this.frames.show();\n}\n\nSnapOneByFour.prototype.createOverlayImage = function() {\n  return this.paper.select('#layer3');\n  // return this.overlay;\n  // return this.paper.image(\n    //   overlayImage,\n    //   this.compositeOrigin.x,\n    //   this.compositeOrigin.y,\n    //   this.compositeDim.w,\n    //   this.compositeDim.h);\n  }\n\n// SnapOneByFour.prototype.set = function() {\n//   return this.paper.set();\n// }\n\nvar StripOneByThree = function(config) {\n    this.photoBorder = 0;\n    this.totalPictures = 3;\n    this.skipFrame = 1 - 1;\n    this.finalSizeRatio = 2/6;\n  }\n\nStripOneByThree.prototype.render = function(stuff) {\n    var compositeDim = stuff.compositeDim;\n    var paper = stuff.paper;\n    var compositeOrigin = stuff.compositeOrigin;\n    var frames = stuff.frames;\n    var images = stuff.images;\n    var all = stuff.all;\n\n    // Scale the photo padding too\n    this.photoBorder = compositeDim.w / 50;\n\n        //upper x\n    var frame_x = compositeOrigin.x + this.photoBorder;\n    var frame_y = compositeOrigin.y + this.photoBorder;\n\n    var _frame_w = (compositeDim.w - (2*this.photoBorder));\n\n    var frameDim = {\n        w: _frame_w, //(compositeDim.w - (2*this.photoBorder)),\n        h: _frame_w * 4/6 // TODO: Fixed aspect ratio?\n    };\n    var frame = paper.rect(frame_x, frame_y, frameDim.w, frameDim.h);\n    frame.attr({'fill': 'black'});\n    var img = paper.image(null, frame_x, frame_y, frameDim.w, frameDim.h);\n\n    images.push(img);\n    frames.push(frame);\n    all.push(img);\n    all.push(frame);\n\n    for (var i = 0; i < 2; i++) {\n      if (i == this.skipFrame) {\n        frame.translate(0, frameDim.h + this.photoBorder);\n        img.translate(0, frameDim.h + this.photoBorder);\n      }\n      frame = frame.clone();\n      img = img.clone();\n      frame.translate(0, frameDim.h + this.photoBorder);\n      img.translate(0, frameDim.h + this.photoBorder);\n      frames.push(frame);\n      images.push(img);\n      all.push(frame);\n      all.push(img);\n    }\n\n    return frameDim;\n  }\n"],"file":"../js/shmile-ui.js"}